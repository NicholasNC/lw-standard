@charset "utf-8";

// ---------------------@function---------------------
// 将px转成rem
@function px2Rem($px, $html-font-size) {
    // 去掉单位‘px’
    $px: $px / 1px;

    @return ($px / $html-font-size * 1rem);
}

// 将px转成vw
@function px2Vw($px, $viewport-width) {
    // 去掉单位‘px’
    $px: $px / 1px;

    @return ($px / $viewport-width * 100vw);
}

@mixin px2rem($property, $px-values, $baseline-px: 75px, $support-for-ie:false) {
    //Conver the baseline into rems
    $baseline-rem: $baseline-px / 1rem * 1;
    //Print the first line in pixel values
    @if $support-for-ie {
        #{$property}: $px-values;
    }
    //if there is only one (numeric) value, return the property/value line for it.
    @if type-of($px-values) == "number"{
        #{$property}: $px-values / $baseline-rem;
    }
    @else {
        //Create an empty list that we can dump values into
        $rem-values:();
        @each $value in $px-values{
            // If the value is zero or not a number, return it
            @if $value == 0 or type-of($value) != "number"{
                $rem-values: append($rem-values, $value);
            } @else {
                $rem-values: append($rem-values, $value / $baseline-rem);
            }
        }
        // Return the property and its list of converted values
        #{$property}: $rem-values;
    }
}

@mixin size-dpr($property, $font-size){
    #{$property}: $font-size;

    [data-dpr="2"] & {
        #{$property}: $font-size * 2;
    }

    [data-dpr="3"] & {
        #{$property}: $font-size * 3;
    }
}
